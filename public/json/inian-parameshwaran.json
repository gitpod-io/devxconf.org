{"name":"Inian Parameshwaran","company":"Supabase","title":"Senior Software Engineer","image":{"url":"inian.jpeg"},"bio":"Inian Parameshwaran is a Senior Software Engineer at Supabase, an open-source Firebase alternative. He likes chocolates, working on developer tools and is passionate about security and performance. Previously, he founded a venture backed startup which helps speed up websites automatically. Did I mention he likes chocolates?","twitter":"everconfusedguy","linkedin":"inianp","github":"inian","abstract":"\n\t\t<div>\n\t\t  <p>\n\t\t\t<strong>Building Supabase Storage. DevX, performance, security - choose three</strong>\n\t\t  </p>\n  \n\t\t  <p>\n\t\t\tBalancing Developer Experience with other concerns like performance and security is not\n\t\t\tstraightforward. For example, you might be able to expose a simpler API at the cost of\n\t\t\tsystem performance. This talk goes into how we balance these concerns when we launched\n\t\t\tSupabase Storage.\n\t\t  </p>\n  \n\t\t  <p>\n\t\t\tSupabase Storage is an object storage service that tightly integrates with Postgres and\n\t\t\tleverages our existing Auth System elegantly. There are a lot of interesting design\n\t\t\tchoices we had to make along the way to build the storage middleware and the client APIs.\n\t\t\tWe explore why we built yet another object storage system and the pitfalls we avoided by\n\t\t\tevaluating prior work. The architecture we settled on also had the benefit of being\n\t\t\textensible to more storage backends in the future. We also put in a lot of thought in\n\t\t\tmaking the storage client APIs simple and familiar.\n\t\t  </p>\n\t\t</div>\n\t  "}